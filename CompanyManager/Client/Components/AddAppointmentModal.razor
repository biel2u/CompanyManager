@using CompanyManager.Client.DataServices
@using CompanyManager.Client.Helpers
@using CompanyManager.Shared
@using System.Net
@inject ICustomerDataService CustomerDataService
@inject IAppointmentDataService AppointmentDataService; 
@inject IOfferDataService OfferDataService;
@inject ISnackbar Snackbar

<EditForm Model="@_appointment" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="_customValidation" />
    <MudDialog>
        <DialogContent>
            <ValidationSummary />
            <div class="content-wrapper">
                <div class="base-data-wrapper">
                    <MudDatePicker Label="Data*" Date="@_appointmentDate" DateChanged="@UpdateStartDate"/>
                    <MudTimePicker Label="Godzina*" Time="@_appointmentTime" TimeChanged="@UpdateTime" />
                    <MudAutocomplete T="string" Label="Klient*" @bind-Value="_appointment.CustomerNameAndPhone" 
                        SearchFunc="@SearchCustomer" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false" />
                    <a href="/user" target="_blank"><MudButton Variant="Variant.Outlined" EndIcon="@Icons.Outlined.OpenInNew" Color="Color.Primary">Nowy kilent</MudButton></a>
                    <MudTextField T="string" Label="Notatka" Variant="Variant.Text" @bind-Value="_appointment.Note" Lines="5" />
                    <MudCheckBox Label="Wizyta potwierdzona" @bind-Checked="_appointment.Confirmed" Color="Color.Primary" Size="Size.Small" />
                </div>
                <div class="offers-wrapper">
                    <input class="offer-input" @bind-Value="_offerSearchValue" @bind-Value:event="oninput" placeholder="Wyszukaj usługę..."></input>
                    <div class="offers-container">
                        @foreach (var offerGroup in FilteredOffers)
                        {
                            <b>@offerGroup.OfferGroupName</b>
                            @foreach (var offer in offerGroup.Offers)
                            {
                                <div>
                                    <MudCheckBox T="bool" Label="@offer.Name" Checked="offer.IsSelected" Size="Size.Small" Color="Color.Primary"
                                        CheckedChanged="(value) => OfferSelected(offer, value)" />
                                </div>
                            }
                        }
                    </div>  
                </div>
                <div class="offers-summary">
                    <h6>Podsumowanie</h6>
                    <div class="selected-offers">
                        @foreach(var offer in _appointment.Offers)
                        {
                            <b>@offer.Name</b>
                            <MudGrid>
                                <MudItem xs="5">
                                    <MudTextField @bind-Value="offer.Price" TextChanged="@UpdateSummarize" HelperText="Cena" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                </MudItem>
                                <MudItem xs="5">
                                    <MudTextField @bind-Value="offer.TimeInMinutes" TextChanged="@UpdateSummarize" HelperText="Czas (minuty)" Variant="Variant.Outlined" Margin="Margin.Dense" />     
                                </MudItem>
                            </MudGrid>
                        }
                    </div>
                </div>
            </div>
        </DialogContent>
        <DialogActions >
            <div class="appointment-summary">
                <div><MudIcon Icon="@Icons.Filled.AttachMoney" Color="Color.Primary" /> @_summarizedCost złoty</div>
                <div>
                    <MudIcon Icon="@Icons.Filled.AccessTime" Color="Color.Info" /> @_appointment.StartDate.ToString("HH:mm") - @_appointment.EndDate.ToString("HH:mm")
                </div>
            </div> 
            <MudButton OnClick="Cancel">Anuluj</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Zapisz</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;
    private CustomValidation? _customValidation;
    private string _offerSearchValue = string.Empty;
    private AppointmentEditForm _appointment = new AppointmentEditForm();
    private IEnumerable<OffersGroup> _offerGroups = Enumerable.Empty<OffersGroup>();
    private decimal _summarizedCost = 0;
    private int _summarizedTime = 0;
    private DateTime? _appointmentDate;
    private TimeSpan? _appointmentTime;

    protected override async Task OnInitializedAsync()
    {
        _appointment = await AppointmentDataService.Get();
        _appointmentDate = _appointment.StartDate;
        _appointmentTime = _appointment.Time;

        _offerGroups = await OfferDataService.GetOffers();
    }

    private async Task OfferSelected(OfferViewModel selectedOffer, bool isSelected)
    {
        selectedOffer.IsSelected = isSelected;

        if (_appointment.Offers.Any(o => o.Id == selectedOffer.Id))
        {
            _appointment.Offers.Remove(selectedOffer);
        }
        else
        {
            _appointment.Offers.Add(selectedOffer);
        }

        await UpdateSummarize();
    }

    private async Task UpdateSummarize()
    {
        _summarizedCost = 0;
        _summarizedTime = 0;

        foreach(var offer in _appointment.Offers)
        {
            _summarizedTime += offer.TimeInMinutes;
            _summarizedCost += offer.Price;
        }

        await UpdateAppointmentDates();
    }

    private async Task UpdateStartDate(DateTime? newDate)
    {
        _appointmentDate = newDate;
        await UpdateAppointmentDates();
    }

    private async Task UpdateTime(TimeSpan? newTime)
    {
        _appointmentTime = newTime;
        await UpdateAppointmentDates();
    }

    private Task UpdateAppointmentDates()
    {
        _appointment.StartDate = (_appointmentDate + _appointmentTime) ?? DateTime.Now;
        _appointment.EndDate = _appointment.StartDate.AddMinutes(_summarizedTime);

        return Task.CompletedTask;
    }

    private async Task<IEnumerable<string>> SearchCustomer(string searchValue)
    {
        var customerList = await CustomerDataService.SearchCustomers(searchValue);
        return customerList;
    }

    IEnumerable<OffersGroup> FilteredOffers => FilterOffers();
    private IEnumerable<OffersGroup> FilterOffers()
    {
        var filteredOffers = new List<OffersGroup>();

        foreach(var group in _offerGroups)
        {
            if (group.OfferGroupName.Contains(_offerSearchValue, StringComparison.CurrentCultureIgnoreCase))
            {
                filteredOffers.Add(new OffersGroup
                {
                    OfferGroupName = group.OfferGroupName,
                    Offers = group.Offers
                }); 
            }
            else
            {
                var offersToAdd = group.Offers.Where(o => o.Name.Contains(_offerSearchValue, StringComparison.CurrentCultureIgnoreCase));
                if (offersToAdd.Any())
                {
                    filteredOffers.Add(new OffersGroup
                    {
                        OfferGroupName = group.OfferGroupName,
                        Offers = offersToAdd
                    }); 
                }  
            }                                
        }

        return filteredOffers;
    }

    private async Task HandleValidSubmit()
    {
        var response = await AppointmentDataService.Create(_appointment);

        var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
        if (response.StatusCode == HttpStatusCode.BadRequest && errors != null && errors.Any())
        {
            _customValidation?.DisplayErrors(errors);
        }
        else if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Wizyta została zapisana.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
