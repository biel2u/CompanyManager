@using CompanyManager.Client.Helpers
@using CompanyManager.Client.Models
@using System.Timers
@inject IJSRuntime JSRuntime;
@inject ICalendar Calendar;
@inject ICalendarControls CalendarControls;
@implements IDisposable;

<div class="calendar-days">
    <div class="controls" style="grid-area: 1 / 1 / @CalendarConstants.GridHourRows / 2;">
                <div>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="CurrentWeek">Dziś</MudButton>
        </div>
        <div>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="PreviousWeek"><span class="oi oi-arrow-left"></span></MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="NextWeek"><span class="oi oi-arrow-right"></span></MudButton>
        </div>

    </div>

    @foreach(var day in calendarDates)
    {       
        <div class="day" style="grid-area: 1 / @day.Column / @CalendarConstants.GridHourRows / @(day.Column + 1);">
            @if (day.IsCurrentDay)
            {               
                <div class="current-date"><b>@day.DisplayedDate</b></div>
                <div><b>@day.NameOfDay</b></div>
            }
            else 
            {
                <div>@day.DisplayedDate</div>
                <div>@day.NameOfDay</div>
            }
        </div>         
    }
</div>
<div class="calendar-hours-wrapper">
    <div class="calendar-hours" style="grid-template-rows: repeat(@CalendarConstants.GridTotalRows, 1fr);">
        @if(selectedWeek == 0)
        {
           <div class="current-day" style="grid-area: 1 / @(currentDayOfWeek + CalendarConstants.TimeRowStart + 1)  / @CalendarConstants.GridTotalRows / @(currentDayOfWeek + CalendarConstants.TimeRowStart + 2);"></div> 
        }
        
        @foreach(var time in calendarTimes)
        {
            if(time.IsCurrentTime)
            {
                <div class="hour current-hour" id="current-hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 9;">
                    @time.Hour
                </div>
                <div class="current-minute" style="grid-area: @(time.MinuteRow) / 1 / @(time.MinuteRow) / 9;"></div>
            }
            else
            {
                <div class="hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 2;">
                    @time.Hour
                </div> 
            } 
        }
    </div>
</div>

@code {
    private List<CalendarDate> calendarDates = new List<CalendarDate>();
    private List<CalendarTime> calendarTimes = new List<CalendarTime>();
    private Timer timer { get; } = new Timer { Interval = 60000 };
    private DateTime selectedDate = DateTime.Now;
    private bool shouldScrollToCurrentTime = false;
    private int currentDayOfWeek;
    private int selectedWeek = 0;

    protected override async Task OnInitializedAsync()
    {
        currentDayOfWeek = await Calendar.GetDayOfWeekWithMondayAsFirstDayOfTheWeek(DateTime.Now);
        var buildCalendarDatesTask = Task.Run(() => Calendar.BuildCalendarDates(currentDayOfWeek));
        var buildCalendarTimesTask = Task.Run(() => Calendar.BuildCalendarTimes());

        calendarDates = await buildCalendarDatesTask;
        calendarTimes = await buildCalendarTimesTask;

        SetTimer();
        shouldScrollToCurrentTime = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldScrollToCurrentTime)
        {
            await JSRuntime.InvokeVoidAsync("scrollIntoView", "current-hour");
            shouldScrollToCurrentTime = false;
        }
    }

    public async Task SetCalendarForSelectedDate(DateTime selectedDateTime)
    {
        var calendarWeek = await CalendarControls.SetCalendarForSelectedWeek(calendarDates, selectedDateTime, currentDayOfWeek);
        calendarDates = calendarWeek.CalendarDates;
        selectedWeek = calendarWeek.SelectedWeek;

        StateHasChanged();
    }

    private async Task NextWeek()
    {
        selectedWeek++;
        calendarDates = await CalendarControls.SwitchWeek(calendarDates, selectedWeek, true, currentDayOfWeek);
    }

    private async Task PreviousWeek()
    {
        selectedWeek--;
        calendarDates = await CalendarControls.SwitchWeek(calendarDates, selectedWeek, false, currentDayOfWeek);
    }

    private async Task CurrentWeek()
    {        
        selectedWeek = 0;
        calendarDates = await CalendarControls.SetCurrentWeek(calendarDates, currentDayOfWeek);
    }

    private void SetTimer()
    {
        timer.Elapsed += async (_, _) => await SetCurrentHourAndMinuteRowEvent(calendarTimes);
        timer.Start();
    }

    private async Task SetCurrentHourAndMinuteRowEvent(List<CalendarTime> calendarTimes)
    {
        calendarTimes = await Calendar.SetCurrentHourAndMinuteRow(calendarTimes);
        StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}