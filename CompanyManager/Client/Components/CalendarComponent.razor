@using CompanyManager.Client.Helpers
@using CompanyManager.Client.Models
@using CompanyManager.Shared
@using System.Timers
@inject IJSRuntime JSRuntime;
@inject ICalendar Calendar;
@inject ICalendarControls CalendarControls;
@implements IDisposable;

<div class="calendar-days">
    <div class="controls" style="grid-area: 1 / 1 / @CalendarConstants.GridHourRows / 2;">
                <div>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="CurrentWeek">Dziś</MudButton>
        </div>
        <div>
            <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default" @onclick="PreviousWeek"><span class="oi oi-arrow-left"></span></MudButton>
            <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default" @onclick="NextWeek"><span class="oi oi-arrow-right"></span></MudButton>
        </div>

    </div>

    @foreach(var day in _calendarDates)
    {       
        <div class="day" style="grid-area: 1 / @day.Column / @CalendarConstants.GridHourRows / @(day.Column + 1);">
            @if (day.IsCurrentDay)
            {               
                <div class="current-date"><b>@day.DisplayedDate</b></div>
                <div><b>@day.NameOfDay</b></div>
            }
            else 
            {
                <div>@day.DisplayedDate</div>
                <div>@day.NameOfDay</div>
            }
        </div>         
    }
</div>
<div class="calendar-hours-wrapper">
    <div class="calendar-hours" style="grid-template-rows: repeat(@CalendarConstants.GridTotalRows, 1fr);">
        @if(_selectedWeek == 0)
        {
           <div class="current-day" style="grid-area: 1 / @(_currentDayOfWeek + CalendarConstants.TimeRowStart + 1)  / @CalendarConstants.GridTotalRows / @(_currentDayOfWeek + CalendarConstants.TimeRowStart + 2);"></div> 
        }
        
        @foreach(var time in _calendarTimes)
        {
            if(time.IsCurrentTime)
            {
                <div class="hour current-hour" id="current-hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 9;">
                    @time.Hour
                </div>
                <div class="current-minute" style="grid-area: @(time.MinuteRow) / 1 / @(time.MinuteRow) / 9;"></div>
            }
            else
            {
                <div class="hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 2;">
                    @time.Hour
                </div> 
            } 
        }
    </div>
</div>

@code {
    private List<CalendarDate> _calendarDates = new List<CalendarDate>();
    private List<CalendarTime> _calendarTimes = new List<CalendarTime>();
    private Timer _timer { get; } = new Timer { Interval = 60000 };
    private DateTime _selectedDate = DateTime.Now;
    private bool _shouldScrollToCurrentTime = false;
    private int _currentDayOfWeek;
    private int _selectedWeek = 0;

    protected override async Task OnInitializedAsync()
    {
        _currentDayOfWeek = await Calendar.GetDayOfWeekWithMondayAsFirstDayOfTheWeek(DateTime.Now);
        _calendarDates = await Calendar.BuildCalendarDates(_currentDayOfWeek);
        _calendarTimes = await Calendar.BuildCalendarTimes();

        SetTimer();
        _shouldScrollToCurrentTime = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldScrollToCurrentTime)
        {
            await JSRuntime.InvokeVoidAsync("scrollIntoView", "current-hour");
            _shouldScrollToCurrentTime = false;
        }
    }

    public async Task SetCalendarForSelectedDate(DateTime selectedDateTime)
    {
        var calendarWeek = await CalendarControls.SetCalendarForSelectedWeek(_calendarDates, selectedDateTime, _currentDayOfWeek);
        _calendarDates = calendarWeek.CalendarDates;
        _selectedWeek = calendarWeek.SelectedWeek;

        StateHasChanged();
    }

    private async Task NextWeek()
    {
        _selectedWeek++;
        _calendarDates = await CalendarControls.SwitchWeek(_calendarDates, _selectedWeek, true, _currentDayOfWeek);
    }

    private async Task PreviousWeek()
    {
        _selectedWeek--;
        _calendarDates = await CalendarControls.SwitchWeek(_calendarDates, _selectedWeek, false, _currentDayOfWeek);
    }

    private async Task CurrentWeek()
    {        
        _selectedWeek = 0;
        _calendarDates = await CalendarControls.SetCurrentWeek(_calendarDates, _currentDayOfWeek);
    }

    private void SetTimer()
    {
        _timer.Elapsed += async (_, _) => await SetCurrentHourAndMinuteRowEvent(_calendarTimes);
        _timer.Start();
    }

    private async Task SetCurrentHourAndMinuteRowEvent(List<CalendarTime> calendarTimes)
    {
        _calendarTimes = await Calendar.SetCurrentHourAndMinuteRow(calendarTimes);
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}