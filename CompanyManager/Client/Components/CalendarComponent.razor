@using CompanyManager.Client.Helpers
@using CompanyManager.Client.Models
@using CompanyManager.Shared
@inject IJSRuntime JSRuntime;
@inject ICalendar Calendar;
@inject ICalendarControls CalendarControls;
@implements IDisposable;

<div class="calendar-days">
    <div class="controls" style="grid-area: 1 / 1 / @CalendarConstants.GridHourRows / 2;">
                <div>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="CurrentWeek">Dziś</MudButton>
        </div>
        <div>
            <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default" @onclick="PreviousWeek"><span class="oi oi-arrow-left"></span></MudButton>
            <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default" @onclick="NextWeek"><span class="oi oi-arrow-right"></span></MudButton>
        </div>

    </div>

    @foreach(var day in _calendarDates)
    {       
        <div class="day" style="grid-area: 1 / @day.Column / @CalendarConstants.GridHourRows / @(day.Column + 1);">
            @if (day.IsCurrentDay)
            {               
                <div class="current-date"><b>@day.DisplayedDate</b></div>
                <div><b>@day.NameOfDay</b></div>
            }
            else 
            {
                <div>@day.DisplayedDate</div>
                <div>@day.NameOfDay</div>
            }
        </div>         
    }
</div>
<div class="calendar-hours-wrapper">
    <div class="calendar-hours" style="grid-template-rows: repeat(@CalendarConstants.GridTotalRows, 1fr);">
        @if(_calendarOptions.SelectedWeek == 0)
        {
            <div 
                class="current-day" 
                style="grid-area: 1 / @(_calendarOptions.CurrentDayOfWeek + CalendarConstants.CalendarAreaStartColumn) / @CalendarConstants.GridTotalRows / @(_calendarOptions.CurrentDayOfWeek + CalendarConstants.CalendarAreaStartColumn);">
            </div> 
        }
        
        @foreach(var time in _calendarTimes)
        {
            if(time.IsCurrentTime)
            {
                <div class="current-hour" id="current-hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 9;">
                    @time.Hour
                </div>
                <div class="current-minute" style="grid-area: @(time.MinuteRow) / 1 / @(time.MinuteRow) / 9;"></div>
            }
            else
            {
                <div style="grid-area: @time.HourRow / 1 / @(time.HourRow + CalendarConstants.GridHourRows) / 2;">
                    @time.Hour
                </div> 
            } 
        }

        <AppointmentCards Appointments=_appointments OnEditSubmit="@RefreshCalendar"/>
    </div>
</div>

@code {
    private List<CalendarDate> _calendarDates = new List<CalendarDate>();
    private List<CalendarTime> _calendarTimes = new List<CalendarTime>();
    private List<DisplayAppointmentModel> _appointments = new List<DisplayAppointmentModel>();
    private CalendarOptions _calendarOptions = new CalendarOptions();

    protected override async Task OnInitializedAsync()
    {
        _calendarOptions.CurrentDayOfWeek = Calendar.GetDayOfWeekWithMondayAsFirstDayOfTheWeek(DateTime.Now);
        _calendarDates = await Calendar.BuildCalendarDates(_calendarOptions.CurrentDayOfWeek);
        _calendarTimes = await Calendar.BuildCalendarTimes();

        SetTimer();
        _calendarOptions.ShouldScrollToCurrentTime = true;

        _appointments = await  Calendar.SetAppointmentsOnCalendar(_calendarDates);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_calendarOptions.ShouldScrollToCurrentTime)
        {
            await JSRuntime.InvokeVoidAsync("scrollIntoView", "current-hour");
            _calendarOptions.ShouldScrollToCurrentTime = false;
        }
    }

    public async Task SetCalendarForSelectedDate(DateTime selectedDateTime)
    {
        var calendarWeek = CalendarControls.SetCalendarForSelectedWeek(_calendarDates, selectedDateTime, _calendarOptions.CurrentDayOfWeek);
        _calendarDates = calendarWeek.CalendarDates;
        _calendarOptions.SelectedWeek = calendarWeek.SelectedWeek;
        _appointments = await Calendar.SetAppointmentsOnCalendar(_calendarDates);

        StateHasChanged();
    }

    public async Task RefreshCalendar()
    {
        _appointments = await Calendar.SetAppointmentsOnCalendar(_calendarDates);
        StateHasChanged();
    }

    private async Task NextWeek()
    {
        _calendarOptions.SelectedWeek++;
        _calendarDates = CalendarControls.SwitchWeek(_calendarDates, _calendarOptions.SelectedWeek, true, _calendarOptions.CurrentDayOfWeek);
        _appointments = await Calendar.SetAppointmentsOnCalendar(_calendarDates);
    }

    private async Task PreviousWeek()
    {
        _calendarOptions.SelectedWeek--;
        _calendarDates = CalendarControls.SwitchWeek(_calendarDates, _calendarOptions.SelectedWeek, false, _calendarOptions.CurrentDayOfWeek);
        _appointments = await Calendar.SetAppointmentsOnCalendar(_calendarDates);
    }

    private async Task CurrentWeek()
    {        
        _calendarOptions.SelectedWeek = 0;
        _calendarDates = CalendarControls.SetCurrentWeek(_calendarDates, _calendarOptions.CurrentDayOfWeek);
        _appointments = await Calendar.SetAppointmentsOnCalendar(_calendarDates);
    }

    private void SetTimer()
    {
        _calendarOptions.CalendarRefreshTimer.Elapsed += async (_, _) => await SetCurrentHourAndMinuteRowEvent(_calendarTimes);
        _calendarOptions.CalendarRefreshTimer.Start();
    }

    private async Task SetCurrentHourAndMinuteRowEvent(List<CalendarTime> calendarTimes)
    {
        _calendarTimes = await Calendar.SetCurrentHourAndMinuteRow(calendarTimes);
        StateHasChanged();
    }

    public void Dispose()
    {
        _calendarOptions.CalendarRefreshTimer?.Dispose();
    }
}