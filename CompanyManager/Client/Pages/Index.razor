@using CompanyManager.Client.Models
@using CompanyManager.Client.Services
@using CompanyManager.Shared
@using System.Timers
@inject IJSRuntime JSRuntime;
@implements IDisposable;

@page "/"

<PageTitle>Kalendarz</PageTitle>

<div class="calendar-days">
    <div class="controls" style="grid-area: 1 / 1 / @GridHourRows / 2;">
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="PreviousWeek">-1</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="NextWeek">+1</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="CurrentWeek">Dziś</MudButton>
    </div>

    @foreach(var day in CalendarDates)
    {
        if (day.IsCurrentDay)
        {
            <div class="day current-day" style="grid-area: 1 / @day.Column / @GridHourRows / @(day.Column + 1);">
                @day.Name @day.Date
            </div>
        }
        else
        {
            <div class="day" style="grid-area: 1 / @day.Column / @GridHourRows / @(day.Column + 1);">
                @day.Name @day.Date
            </div> 
        }
    }
</div>
<div class="calendar-hours-wrapper">
    <div class="calendar-hours" style="grid-template-rows: repeat(@GridTotalRows, 1fr);">     
        @foreach(var time in CalendarTimes)
        {
            if(time.IsCurrentTime)
            {
                <div class="current-day" id="current-hour" style="grid-area: @time.HourRow / 1 / @(time.HourRow + GridHourRows) / 2;">
                    @time.Hour
                </div>
                <div class="current-minute" style="grid-area: @(time.MinuteRow) / 1 / @(time.MinuteRow) / 9;"></div>
            }
            else
            {
                <div style="grid-area: @time.HourRow / 1 / @(time.HourRow + GridHourRows) / 2;">
                    @time.Hour
                </div> 
            } 
        }
    </div>
</div>

@code {
    private List<CalendarDate> CalendarDates = new List<CalendarDate>();
    private List<CalendarTime> CalendarTimes = new List<CalendarTime>();
    private int GridTotalRows { get; } = 288;
    private int GridHourRows { get; } = 12;
    private Timer Timer { get; } = new Timer { Interval = 60000 };
    private const int TimeRowStart = 1;
    private const int MinutesSampling = 5;
    private bool ShouldScrollToCurrentTime = false;
    private int CurrentDayOfWeek;
    private int Week = 0;

    protected override async Task OnInitializedAsync()
    {
        var buildCalendarDatesTask = Task.Run(() => BuildCalendarDates());
        var buildCalendarTimesTask = Task.Run(() => BuildCalendarTimes());

        CalendarDates = await buildCalendarDatesTask;
        CalendarTimes = await buildCalendarTimesTask;

        SetTimer();
        ShouldScrollToCurrentTime = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ShouldScrollToCurrentTime)
        {
            await JSRuntime.InvokeVoidAsync("scrollIntoView", "current-hour");
            ShouldScrollToCurrentTime = false;
        }
    }

    private Task<List<CalendarDate>> BuildCalendarDates()
    {
        const int dateColumnStart = 2;
        CurrentDayOfWeek = GetCurrentDayOfWeekWithMondayAsFirstDayOfTheWeek();
        var dayNames = new List<string>(6) { "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota", "Niedziela" };
        var dateTimeNow = DateTime.Now;
        var calendarDates = new List<CalendarDate>();

        for(var i = 0; i <= 6; i++)
        {
            var dateDiff = i - CurrentDayOfWeek;
            calendarDates.Add(new CalendarDate
            {
                Name = dayNames[i],
                Column = i + dateColumnStart,
                Date = dateTimeNow.AddDays(dateDiff),
                IsCurrentDay = dateDiff == 0
            });
        }

        return Task.FromResult(calendarDates);
    }

    private int GetCurrentDayOfWeekWithMondayAsFirstDayOfTheWeek()
    {
        var currentDayColumn = (int)DateTime.Now.DayOfWeek - 1;
        const int sundayAsLastDayOfWeek = 6;

        if(currentDayColumn < 0)
        {
            currentDayColumn = sundayAsLastDayOfWeek;
        }

        return currentDayColumn;
    }

    private Task<List<CalendarTime>> BuildCalendarTimes()
    {
        var calendarTimes = new List<CalendarTime>();
        var dateTimeNow = DateTime.Now;
        var currentHourRow = dateTimeNow.Hour * GridHourRows;

        for(var i = 0; i < GridTotalRows; i = i + GridHourRows)
        {
            var hour = i / GridHourRows;
            calendarTimes.Add(new CalendarTime
            {
               Hour =  $"{hour}:00",
               HourRow = i + TimeRowStart,
               IsCurrentTime = i == currentHourRow
            });
        }

        SetMinuteRow(dateTimeNow, calendarTimes);
        return Task.FromResult(calendarTimes);
    }

    private void SetMinuteRow(DateTime dateTimeNow, List<CalendarTime> calendarTimes)
    {
        var currentMinuteRow = dateTimeNow.Minute / MinutesSampling;
        var currentHour = calendarTimes.Single(c => c.IsCurrentTime);
        currentHour.MinuteRow = currentHour.HourRow + currentMinuteRow;
    }

    private Task SetCurrentHourAndMinuteRowEvent()
    {
        var dateTimeNow = DateTime.Now;
        var currentHourRow = dateTimeNow.Hour * GridHourRows + TimeRowStart;
        var currentMinuteRow = dateTimeNow.Minute / MinutesSampling;

        foreach(var time in CalendarTimes)
        {
            if(time.HourRow == currentHourRow)
            {
                time.IsCurrentTime = true;
                time.MinuteRow = currentMinuteRow + time.HourRow;
            }
            else
            {
                time.IsCurrentTime = false;
            }
        }

        StateHasChanged();

        return Task.CompletedTask;
    }

    private void NextWeek()
    {

        Week++;
        if (Week == 0)
        {
            CurrentWeek();
            return;
        }

        foreach(var day in CalendarDates)
        {        
            day.Date = day.Date.AddDays(7);
            day.IsCurrentDay = false;           
        }
    }

    private void PreviousWeek()
    {
        Week--;
        if (Week == 0)
        {
            CurrentWeek();
            return;
        }

        foreach(var day in CalendarDates)
        {        
            day.Date = day.Date.AddDays(-7);
            day.IsCurrentDay = false;           
        }
    }

    private void CurrentWeek()
    {
        var dayEnumeration = 0;
        var dateTimeNow = DateTime.Now;
        Week = 0;

        foreach(var day in CalendarDates)
        {            
            var dateDiff = dayEnumeration - CurrentDayOfWeek;
            day.Date = dateTimeNow.AddDays(dateDiff);
            day.IsCurrentDay = dateDiff == 0;           
            dayEnumeration++;
        }
    }

    private void SetTimer()
    {
        Timer.Elapsed += async (_, _) => await SetCurrentHourAndMinuteRowEvent();
        Timer.Start();
    } 

    public void Dispose()
    {
        Timer?.Dispose();
    }
}