// <auto-generated />
using System;
using CompanyManager.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyManager.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220411142439_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompanyManager.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.AppointmentOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("CustomOfferPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CustomOfferTime")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("OfferId");

                    b.ToTable("AppointmentOffers");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Consent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Contact")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("PublicImage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfferCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferCategoryId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Konsultacje 15-minutowa",
                            OfferCategoryId = 1,
                            Price = 0m,
                            TimeInMinutes = 15
                        },
                        new
                        {
                            Id = 2,
                            Name = "Konsultacja Beauty dla skór problematycznych",
                            OfferCategoryId = 1,
                            Price = 250m,
                            TimeInMinutes = 120
                        },
                        new
                        {
                            Id = 3,
                            Name = "Konsultacja Beauty dla skór starzejących się",
                            OfferCategoryId = 1,
                            Price = 200m,
                            TimeInMinutes = 120
                        },
                        new
                        {
                            Id = 4,
                            Name = "Konsultacja kontrolna",
                            OfferCategoryId = 1,
                            Price = 100m,
                            TimeInMinutes = 120
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zabieg oczyszczający",
                            OfferCategoryId = 2,
                            Price = 250m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 6,
                            Name = "Zabieg z enzymami",
                            OfferCategoryId = 2,
                            Price = 250m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 7,
                            Name = "Zabieg retinolowy",
                            OfferCategoryId = 2,
                            Price = 400m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 8,
                            Name = "Zabieg z maską terapeutyczną",
                            OfferCategoryId = 2,
                            Price = 150m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 9,
                            Name = "Zabieg detoksykujący",
                            OfferCategoryId = 2,
                            Price = 250m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 10,
                            Name = "Peelingi chemiczne",
                            OfferCategoryId = 2,
                            Price = 300m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sonoforeza",
                            OfferCategoryId = 3,
                            Price = 300m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mezoterapia mikroigłowa",
                            OfferCategoryId = 3,
                            Price = 400m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 13,
                            Name = "Mezoterapia mikroigłowa",
                            OfferCategoryId = 4,
                            Price = 300m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mezoterapia igłowa",
                            OfferCategoryId = 5,
                            Price = 400m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 15,
                            Name = "Hyalual Xela Rederm 1,1% (2ml) / Electri (1,5ml)",
                            OfferCategoryId = 6,
                            Price = 600m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 16,
                            Name = "Hyalual Xela Rederm 1,8 % (2ml)",
                            OfferCategoryId = 6,
                            Price = 700m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 17,
                            Name = "Hyalual Xela Rederm 2,2% (2ml)",
                            OfferCategoryId = 6,
                            Price = 800m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 18,
                            Name = "Nucleofill Medium / Strong",
                            OfferCategoryId = 7,
                            Price = 750m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 19,
                            Name = "Sunekos 200",
                            OfferCategoryId = 7,
                            Price = 600m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mezoterapia mikroigłowa + ampułka",
                            OfferCategoryId = 8,
                            Price = 200m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 21,
                            Name = "Mezoterapia mikroigłowa + bioinżynieria tkankowa",
                            OfferCategoryId = 8,
                            Price = 250m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 22,
                            Name = "Mezoterapia igłowa Dermaheal / RRS HA",
                            OfferCategoryId = 8,
                            Price = 350m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 23,
                            Name = "Stymulator tkankowy Nucleofil Soft Eyes",
                            OfferCategoryId = 8,
                            Price = 750m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 24,
                            Name = "Stymulator tkankowy Sunekos 200",
                            OfferCategoryId = 8,
                            Price = 600m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 25,
                            Name = "Redermalizacja Electri",
                            OfferCategoryId = 8,
                            Price = 600m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 26,
                            Name = "Mezoterapia mikroigłowa + ampułka",
                            OfferCategoryId = 9,
                            Price = 250m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 27,
                            Name = "Mezoterapia igłowa RRS XL Hair",
                            OfferCategoryId = 9,
                            Price = 400m,
                            TimeInMinutes = 90
                        },
                        new
                        {
                            Id = 28,
                            Name = "Mezoterapia igłowa Dr Cyj Hair Filler",
                            OfferCategoryId = 9,
                            Price = 650m,
                            TimeInMinutes = 90
                        });
                });

            modelBuilder.Entity("CompanyManager.Server.Models.OfferCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OfferCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Konsultacje"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Zabiegi terapeutyczne"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bioinżynieria tkankowa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mezoterapia mikroigłowa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mezoterapia igłowa"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Redermalizacja"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Stymulatory tkankowe"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Zabiegi na okolice oczu"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Zabiegi na skórę głowy"
                        });
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Photo", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("FileName");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Appointment", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.AppointmentOffer", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.Appointment", "Appointment")
                        .WithMany("AppointmentOffers")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Server.Models.Offer", "Offer")
                        .WithMany("AppointmentOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Consent", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.Customer", "Customer")
                        .WithOne("Consent")
                        .HasForeignKey("CompanyManager.Server.Models.Consent", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Offer", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.OfferCategory", "OfferCategory")
                        .WithMany("Offers")
                        .HasForeignKey("OfferCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfferCategory");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Photo", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.Appointment", "Appointment")
                        .WithMany("Photos")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("CompanyManager.Server.Models.Customer", "Customer")
                        .WithMany("Photos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CompanyManager.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentOffers");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Customer", b =>
                {
                    b.Navigation("Consent")
                        .IsRequired();

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.Offer", b =>
                {
                    b.Navigation("AppointmentOffers");
                });

            modelBuilder.Entity("CompanyManager.Server.Models.OfferCategory", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
