@using CompanyManager.Client.DataServices
@using CompanyManager.Client.Helpers
@using CompanyManager.Shared
@inject IDialogProvider DialogProvider;
@inject IAppointmentDataService AppointmentDataService
@inject ISnackbar Snackbar

@foreach(var appointment in Appointments)
{
    <div class="appointment-card-wrapper" style="grid-area: @(appointment.StartRow) / @(appointment.DayOfWeek + CalendarConstants.CalendarAreaStartColumn) / @(appointment.EndRow) / @(appointment.DayOfWeek + CalendarConstants.CalendarAreaStartColumn);">
        <MudMenu PositionAtCursor="true" Style="width: 100%; height: 100%">
            <ActivatorContent>
                <div class="appointment-card">
                    <div>@appointment.StartDate.ToString("HH:mm") - @appointment.EndDate.ToString("HH:mm")</div>
                    <div><b>@appointment.ClientName</b></div>
                    <div>
                        @appointment.OfferName
                        @if(appointment.OffersCount > 1)
                        {
                            <span class="multiple-offers"> +@(appointment.OffersCount - 1)</span>
                        }
                    </div>
                </div>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="() => EditAppointment(appointment)">Edytuj</MudMenuItem>
                <MudMenuItem @onclick="() => DeleteAppointment(appointment)"><span class="delete">Usuń</span></MudMenuItem>              
            </ChildContent>
        </MudMenu>
    </div>
}

@code {
    [Parameter]
    public List<DisplayAppointmentModel> Appointments { get; set; } = new List<DisplayAppointmentModel>();

    [Parameter]
    public EventCallback OnEditSubmit { get; set; }

    private async Task DeleteAppointment(DisplayAppointmentModel appointment)
    {
        var dialog = DialogProvider.ServeDeleteAppointmentDialog(appointment);
        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            var response = await AppointmentDataService.DeleteAppointment(appointment.Id);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Pomyślnie usunięto wizytę.", Severity.Normal);
                Appointments.Remove(appointment); 
            } 
        }      
    }

    private async Task EditAppointment(DisplayAppointmentModel appointment)
    {
        var dialog = DialogProvider.ServeEditAppointmentDialog(appointment);
        var result = await dialog.Result;

        if (result.Cancelled == false)
        {
            await OnEditSubmit.InvokeAsync();
        }    
    }
}
