@using CompanyManager.Client.DataServices
@using CompanyManager.Client.Helpers
@using CompanyManager.Client.Models
@using CompanyManager.Shared
@using System.Net
@inject ICustomerDataService CustomerDataService;
@inject IAppointmentDataService AppointmentDataService; 
@inject IOfferDataService OfferDataService;
@inject ISnackbar Snackbar
@inject IOfferSelector OfferSelector;
@inject IAppointmentSummarizeService AppointmetSummarizeService;

<EditForm Model="@_appointment" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="_customValidation" />
    <MudDialog>
        <DialogContent>
            <ValidationSummary />
            <div class="content-wrapper">
                <div class="base-data-wrapper">
                    <MudDatePicker Label="Data*" Date="@SelectedDate" DateChanged="@UpdateStartDate"/>
                    <MudTimePicker Label="Godzina*" Time="@_appointmentSummary.AppointmentTime" TimeChanged="@UpdateTime" />
                    <MudAutocomplete T="string" Label="Klient*" @bind-Value="_appointment.CustomerNameAndPhone" 
                        SearchFunc="@SearchCustomer" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false" />
                    <a href="/customer" target="_blank">
                        <MudButton Variant="Variant.Outlined" EndIcon="@Icons.Outlined.OpenInNew" Color="Color.Primary">Nowy kilent</MudButton>
                    </a>
                    <MudTextField T="string" Label="Notatka" Variant="Variant.Text" @bind-Value="_appointment.Note" Lines="5" />
                    <MudCheckBox Label="Wizyta potwierdzona" @bind-Checked="_appointment.Confirmed" Color="Color.Primary" Size="Size.Small" />
                </div>
                <div class="offers-wrapper">
                    <input class="offer-input" @bind-Value="_offerSearchValue" @bind-Value:event="oninput" placeholder="Wyszukaj usługę..."/>
                    <div class="offers-container">
                        @foreach (var offerGroup in FilteredOffers)
                        {
                            <b>@offerGroup.OfferGroupName</b>
                            @foreach (var offer in offerGroup.Offers)
                            {
                                <div>
                                    <MudCheckBox T="bool" Label="@offer.Name" Checked="offer.IsSelected" Size="Size.Small" Color="Color.Primary"
                                        CheckedChanged="(value) => OfferSelected(offer, value)" />
                                </div>
                            }
                        }
                    </div>  
                </div>
                <div class="offers-summary">
                    <h6>Podsumowanie</h6>
                    <div class="selected-offers">
                        @foreach(var offer in _appointment.Offers)
                        {
                            <b>@offer.Name</b>
                            <MudGrid>
                                <MudItem xs="5">
                                    <MudTextField @bind-Value="offer.Price" TextChanged="@UpdateSummarize" HelperText="Cena" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                </MudItem>
                                <MudItem xs="5">
                                    <MudTextField @bind-Value="offer.TimeInMinutes" TextChanged="@UpdateSummarize" HelperText="Czas (minuty)" Variant="Variant.Outlined" Margin="Margin.Dense" />     
                                </MudItem>
                            </MudGrid>
                        }
                    </div>
                </div>
            </div>
        </DialogContent>
        <DialogActions >
            <div class="appointment-summary">
                @if(_appointment.Offers != null && _appointment.Offers.Any())
                {
                    <div><MudIcon Icon="@Icons.Filled.AttachMoney" Color="Color.Primary" /> @_appointmentSummary.SummarizedCost złoty</div>
                    <div>
                        <MudIcon Icon="@Icons.Filled.AccessTime" Color="Color.Info" /> @_appointmentSummary.AppointmentTime.ToString(@"hh\:mm") - @_appointment.EndDate.ToString("HH:mm")
                    </div>
                }
            </div> 
            <MudButton OnClick="Cancel">Anuluj</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Zapisz</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] 
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public int? AppointmentIdToEdit { get; set; }

    private CustomValidation? _customValidation;
    private string _offerSearchValue = string.Empty;
    private EditAppointmentModel _appointment = new EditAppointmentModel();
    private IEnumerable<OffersGroup> _offerGroups = Enumerable.Empty<OffersGroup>();
    private AppointmentSummary _appointmentSummary = new AppointmentSummary();

    protected override async Task OnInitializedAsync()
    {
        _appointment = await AppointmentDataService.GetAppointment(AppointmentIdToEdit);
        _appointmentSummary.AppointmentTime = _appointment.Id != null ? _appointment.StartDate.TimeOfDay : DateTime.Now.TimeOfDay;
        _offerGroups = await OfferDataService.GetOffers(_appointment.Offers);
    }

    private async Task OfferSelected(DisplayOfferModel selectedOffer, bool isSelected)
    {
        selectedOffer.IsSelected = isSelected;
        _appointment.Offers = await OfferSelector.BuildSelectedOffersCollection(selectedOffer, _appointment.Offers);

        UpdateSummarize();
    }

    private void UpdateSummarize()
    {
        _appointmentSummary = AppointmetSummarizeService.UpdateSummarize(_appointmentSummary, _appointment.Offers);
        _appointment = AppointmetSummarizeService.SummarizeAppointment(_appointment, SelectedDate, _appointmentSummary);        
    }

    private void UpdateStartDate(DateTime? newDate)
    {
        SelectedDate = newDate ?? DateTime.Now;
        _appointment = AppointmetSummarizeService.SummarizeAppointment(_appointment, SelectedDate, _appointmentSummary);        
    }

    private void UpdateTime(TimeSpan? newTime)
    {
        _appointmentSummary.AppointmentTime = newTime ?? DateTime.Now.TimeOfDay;
        _appointment = AppointmetSummarizeService.SummarizeAppointment(_appointment, SelectedDate, _appointmentSummary);        
    }  

    private async Task<IEnumerable<string>> SearchCustomer(string searchValue)
    {
        var customerList = await CustomerDataService.SearchCustomers(searchValue);
        return customerList;
    }

    IEnumerable<OffersGroup> FilteredOffers => OfferSelector.FilterOffers(_offerGroups, _offerSearchValue);

    private async Task HandleValidSubmit()
    {
        var response = await AppointmentDataService.HandleSubmit(_appointment);
        var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();

        if (response.StatusCode == HttpStatusCode.BadRequest && errors != null && errors.Any())
        {
            _customValidation?.DisplayErrors(errors);
        }
        else if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Wizyta została zapisana.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
